#!/usr/bin/python

import sys
import dbus

bus = dbus.SystemBus()

manager = dbus.Interface(bus.get_object("net.connman", "/"),
					"net.connman.Manager")

if len(sys.argv) < 2:
	print "Usage: %s <command>" % (sys.argv[0])
	print ""
	print "  state"
	print "  services"
	print "  passphrase <service> [passphrase]"
	print "  autoconnect <service> [autoconnect]"
	print "  connect <service>"
	print "  disconnect <service>"
	print "  remove <service>"
	print ""
	print "  scan [type]"
	print "  enable <type>"
	print "  disable <type>"
	print "  offlinemode [on|off]"
	sys.exit(1)

def print_services(services):
	for path in services:
		service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

		properties = service.GetProperties()

		identifier = path[path.rfind("/") + 1:]

		if properties["Favorite"] == dbus.Boolean(1):
			favorite = "*"
		else:
			favorite = " "

		if "Name" in properties.keys():
			name = properties["Name"]
		else:
			name = "{" + properties["Type"] + "}"

		print "%s %-26s { %s }" % (favorite, name, identifier)

if sys.argv[1] == "state":
	properties = manager.GetProperties()

	print "System is %s" % (properties["State"])

elif sys.argv[1] in ["services", "list", "show"]:
	properties = manager.GetProperties()

	print_services(properties["Services"])

elif sys.argv[1] in ["passphrase", "pass"]:
	if (len(sys.argv) < 3):
		print "Need at least service parameter"
		sys.exit(1)

	path = "/net/connman/service/" + sys.argv[2]

	service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

	if (len(sys.argv) > 3):
		passphrase = sys.argv[3]

		service.SetProperty("Passphrase", passphrase);

		print "Passphrase %s set for %s" % (passphrase, sys.argv[2])
	else:
		properties = service.GetProperties()

		if "Name" in properties.keys():
			name = properties["Name"]
		else:
			name = "{" + properties["Type"] + "}"

		if "Passphrase" in properties.keys():
			passphrase = properties["Passphrase"]
		else:
			passphrase = "not set"

		print "Passphrase for %s is %s" % (name, passphrase)

elif sys.argv[1] in ["autoconnect", "autoconn"]:
	if (len(sys.argv) < 3):
		print "Need at least service parameter"
		sys.exit(1)

	path = "/net/connman/service/" + sys.argv[2]

	service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

	if (len(sys.argv) > 3):
		flag = sys.argv[3].strip().lower()
		autoconnect = dbus.Boolean(flag not in ['false', 'f', 'n', '0'])

		service.SetProperty("AutoConnect", autoconnect);

		print "Auto connect %s for %s" % (autoconnect, sys.argv[2])
	else:
		properties = service.GetProperties()

		if "Name" in properties.keys():
			name = properties["Name"]
		else:
			name = "{" + properties["Type"] + "}"

		if "AutoConnect" in properties.keys():
			autoconnect = properties["AutoConnect"]
		else:
			autoconnect = dbus.Boolean(0)

		print "Auto connect %s for %s" % (autoconnect, name)

elif sys.argv[1] in ["connect", "conn"]:
	if (len(sys.argv) < 3):
		print "Need at least service parameter"
		sys.exit(1)

	path = "/net/connman/service/" + sys.argv[2]

	service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

	try:
		service.Connect(timeout=60000)
	except dbus.DBusException, error:
		print "%s: %s" % (error._dbus_error_name, error.message)

elif sys.argv[1] in ["disconnect", "disc"]:
	if (len(sys.argv) < 3):
		print "Need at least service parameter"
		sys.exit(1)

	path = "/net/connman/service/" + sys.argv[2]

	service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

	try:
		service.Disconnect()
	except dbus.DBusException, error:
		print "%s: %s" % (error._dbus_error_name, error.message)

elif sys.argv[1] in ["remove"]:
	if (len(sys.argv) < 3):
		print "Need at least service parameter"
		sys.exit(1)

	path = "/net/connman/service/" + sys.argv[2]

	service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")

	properties = service.GetProperties()

	if properties["Favorite"] == dbus.Boolean(0):
		print "Only favorite services can be removed"
		sys.exit(1)

	try:
		service.Remove()
	except dbus.DBusException, error:
		print "%s: %s" % (error._dbus_error_name, error.message)

elif sys.argv[1] == "scan":
	if len(sys.argv) > 2:
		manager.RequestScan(sys.argv[2])
	else:
		manager.RequestScan("")

elif sys.argv[1] == "enable":
	if len(sys.argv) > 2:
		manager.EnableTechnology(sys.argv[2])
	else:
		manager.EnableTechnology("")

elif sys.argv[1] == "disable":
	if len(sys.argv) > 2:
		manager.DisableTechnology(sys.argv[2])
	else:
		manager.DisableTechnology("")

elif sys.argv[1] in ["offlinemode", "flightmode"]:
	if len(sys.argv) > 2:
		if sys.argv[2] == "on":
			active = dbus.Boolean(1)
		elif sys.argv[2] == "off":
			active = dbus.Boolean(0)
		else:
			active = dbus.Boolean(sys.argv[2])
		manager.SetProperty("OfflineMode", active)
	else:
		properties = manager.GetProperties()
		print "Offline mode is %s" % (properties["OfflineMode"])

else:
	print "Unknown command"
